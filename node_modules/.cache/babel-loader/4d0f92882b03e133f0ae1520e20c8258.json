{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/clone/Desktop/Projects/FullStack_developement/new-notes-apollo-client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"mutation createTemplate(\\n   \\t$name: String,\\n\\t$subject: String!,\\n\\t$body: String!,\\n\\t$recipients: [String]!,\\n\\t$action: String!,\\n\\t$priorityId: String!\\n\\t$sourceServiceId: String) {\\n\\t   createTemplate : Note_createNote (\\n         name: $name,\\n         subject: $subject,\\n         body: $body,\\n         recipients: $recipients,\\n      action: $action\\n      priorityId: $priorityId\\n         sourceServiceId: $sourceServiceId\\n      ) {\\n         id\\n    }\\n  }\\n\"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\nmutation createNote(\\n    $title: String!, \\n    $content: String!,\\n    $author: String!, \\n    $place: String!) {\\n        createNote: Note_createNote(\\n            title: $title, \\n            content: $content, \\n            author: $author, \\n            place: $place\\n        ) {\\n      title\\n      content\\n      author\\n      place\\n    }\\n  }\\n}\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n{\\n    getNotes {\\n        title\\n        content\\n        author\\n        place\\n    }\\n}\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from \"graphql-tag\";\nconst GET_BOOKS = gql(_templateObject());\nconst CREATE_NOTE = gql(_templateObject2());\nconst CREATE_TEMPLATE_MUTATION = gql(_templateObject3());\nexport default {\n  GET_BOOKS,\n  CREATE_NOTE\n};","map":{"version":3,"sources":["/home/clone/Desktop/Projects/FullStack_developement/new-notes-apollo-client/src/query.js"],"names":["gql","GET_BOOKS","CREATE_NOTE","CREATE_TEMPLATE_MUTATION"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAEA,MAAMC,SAAS,GAAGD,GAAH,mBAAf;AAUA,MAAME,WAAW,GAAGF,GAAH,oBAAjB;AAqBA,MAAMG,wBAAwB,GAAGH,GAAH,oBAA9B;AAsBA,eAAe;AAACC,EAAAA,SAAD;AAAaC,EAAAA;AAAb,CAAf","sourcesContent":["import gql from \"graphql-tag\";\n\nconst GET_BOOKS = gql`\n{\n    getNotes {\n        title\n        content\n        author\n        place\n    }\n}`;\n\nconst CREATE_NOTE = gql`\nmutation createNote(\n    $title: String!, \n    $content: String!,\n    $author: String!, \n    $place: String!) {\n        createNote: Note_createNote(\n            title: $title, \n            content: $content, \n            author: $author, \n            place: $place\n        ) {\n      title\n      content\n      author\n      place\n    }\n  }\n}`;\n\n\nconst CREATE_TEMPLATE_MUTATION = gql`mutation createTemplate(\n   \t$name: String,\n\t$subject: String!,\n\t$body: String!,\n\t$recipients: [String]!,\n\t$action: String!,\n\t$priorityId: String!\n\t$sourceServiceId: String) {\n\t   createTemplate : Note_createNote (\n         name: $name,\n         subject: $subject,\n         body: $body,\n         recipients: $recipients,\n      action: $action\n      priorityId: $priorityId\n         sourceServiceId: $sourceServiceId\n      ) {\n         id\n    }\n  }\n`\n\nexport default {GET_BOOKS , CREATE_NOTE }"]},"metadata":{},"sourceType":"module"}