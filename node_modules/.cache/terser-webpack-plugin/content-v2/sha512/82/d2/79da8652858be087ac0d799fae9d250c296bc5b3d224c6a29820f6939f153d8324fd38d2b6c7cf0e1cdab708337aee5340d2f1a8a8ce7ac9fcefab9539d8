{"map":"{\"version\":3,\"sources\":[\"/home/clone/Desktop/Projects/FullStack_developement/new-notes-apollo-client/src/App.js\",\"/home/clone/Desktop/Projects/FullStack_developement/new-notes-apollo-client/src/serviceWorker.js\",\"/home/clone/Desktop/Projects/FullStack_developement/new-notes-apollo-client/src/index.js\"],\"names\":[\"client\",\"ApolloClient\",\"uri\",\"GET_BOOKS\",\"gql\",\"_templateObject\",\"GetNotes\",\"react_default\",\"a\",\"createElement\",\"react_apollo_esm\",\"query\",\"_ref\",\"loading\",\"error\",\"data\",\"console\",\"log\",\"getNotes\",\"map\",\"_ref2\",\"title\",\"content\",\"App\",\"App_GetNotes\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"iXAKA,IAAMA,EAAS,IAAIC,EAAAA,EAAa,CAC5BC,IAAK,2BAGHC,EAAYC,GAAAA,CAAHC,KAQTC,EAAU,WAAA,OACZC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,MAASR,GAEZ,SAAAS,GAA4B,IAA1BC,EAA0BD,EAA1BC,QAASC,EAAiBF,EAAjBE,MAAQC,EAASH,EAATG,KACf,OAAGF,EAAiBN,EAAAC,EAAAC,cAAA,IAAA,KAAA,cACjBK,EAAcP,EAAAC,EAAAC,cAAA,IAAA,KAAA,yBACjBO,QAAQC,IAAIF,GAETA,EAAaA,EAAKG,SAASC,IAAI,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,MAAQC,EAAVF,EAAUE,QAAV,OAC9Bf,EAAAC,EAAAC,cAAA,MAAA,KACAF,EAAAC,EAAAC,cAAA,KAAA,KAAA,eAAiBY,EAAjB,KACAd,EAAAC,EAAAC,cAAA,IAAA,KAAA,iBAAkBa,EAAlB,aAHJ,MAoBGC,EATJ,WAAA,OACHhB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAgBV,OAAUA,GAC1BO,EAAAC,EAAAC,cAAA,MAAA,KACIF,EAAAC,EAAAC,cAAA,KAAA,KAAA,8BACAF,EAAAC,EAAAC,cAACe,EAAD,SC5BQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React from 'react';\\nimport ApolloClient from \\\"apollo-boost\\\";\\nimport { ApolloProvider, Query } from \\\"react-apollo\\\";\\nimport gql from \\\"graphql-tag\\\";\\n\\nconst client = new ApolloClient({\\n    uri: \\\"http://localhost:4000/\\\"\\n});\\n\\nconst GET_BOOKS = gql`\\n{\\n    getNotes {\\n        content\\n        title\\n    }\\n}`;\\n\\nconst GetNotes =() => (\\n    <Query query = {GET_BOOKS}>\\n    {\\n        ({loading ,error , data}) =>{\\n            if(loading) return  <p>Loading...</p>;\\n            if(error) return <p>Bye Bye Amit Arya...</p>\\n            console.log(data)\\n            debugger;\\n            if(data) return data.getNotes.map(({title , content}) =>(\\n                <div>\\n                <h3>Notes title {title} </h3>\\n                <p>Notes content {content} </p>\\n                </div>\\n            ));\\n        }}\\n\\n    </Query>\\n)\\n\\nconst App =() => (\\n        <ApolloProvider client = {client}>\\n        <div>\\n            <h2>My First Apollo Client App</h2>\\n            <GetNotes/>\\n        </div>\\n        </ApolloProvider>\\n);\\n\\nexport default App;\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{28:function(e,n,t){e.exports=t(43)},33:function(e,n,t){},43:function(e,n,t){\"use strict\";t.r(n);var o=t(4),a=t.n(o),r=t(21),l=t.n(r),c=(t(33),t(22)),i=t(27),u=t(18),s=t(12),m=t.n(s);function d(){var e=Object(c.a)([\"\\n{\\n    getNotes {\\n        content\\n        title\\n    }\\n}\"]);return d=function(){return e},e}var p=new i.a({uri:\"http://localhost:4000/\"}),w=m()(d()),v=function(){return a.a.createElement(u.b,{query:w},function(e){var n=e.loading,t=e.error,o=e.data;return n?a.a.createElement(\"p\",null,\"Loading...\"):t?a.a.createElement(\"p\",null,\"Bye Bye Amit Arya...\"):(console.log(o),o?o.getNotes.map(function(e){var n=e.title,t=e.content;return a.a.createElement(\"div\",null,a.a.createElement(\"h3\",null,\"Notes title \",n,\" \"),a.a.createElement(\"p\",null,\"Notes content \",t,\" \"))}):void 0)})},E=function(){return a.a.createElement(u.a,{client:p},a.a.createElement(\"div\",null,a.a.createElement(\"h2\",null,\"My First Apollo Client App\"),a.a.createElement(v,null)))};Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));l.a.render(a.a.createElement(E,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[28,1,2]]]);","extractedComments":[]}